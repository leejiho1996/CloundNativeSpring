apiVersion: apps/v1 # 배포 객체에 대한 API 버전
kind: Deployment # 생성 할 객체의 유형
metadata:
  name: catalog-service # 배포의 이름
  labels:
    app: catalog-service # 배포에 추가할 레이블의 집합
  annotations:
    prometheus.io/scrape: "true" # 프로메테우스에게 이 파드에 있는 컨테이너로 부터 데이터를 가져와야함을 알림
    prometheus.io/path: /actuator/prometheus # 메트릭 Http 엔드포인트
    prometheus.io/port: "9001" # 메트릭 엔드포인트 포트
spec:
  replicas: 1
  selector: #  확장할 파드를 선택하기 위해 사용할 레이블을 정의
    matchLabels:
      app: catalog-service
  template: # 파드 생성을 위한 템플릿
    metadata:
      labels:
        app: catalog-service
    spec:
      containers: # 파드 내 컨테이너의 목록
        - name: catalog-service # 파드의 이름
          image: catalog-service # 컨테이너를 실행하기 위한 이미지 (태그가 없으면 자동으로 latest)
          imagePullPolicy: IfNotPresent # 이미지가 로컬에 없는 겨우만 컨테이너 저장소에서 다운
          lifecycle:
            preStop: # 파드에 SIGTERM(종료신호)를 보내기전에 5초를 기다리게 한다 (파드를 호출하는 다른 파드에 요청 전달 중지를 위한 시간을 벌어다 줌)
              exec:
                command: [ "sh", "-c", "sleep 5" ]
          ports:
            - containerPort: 9001
          env: # 파드로 전달되는 환경 변수 목록
            - name: BPL_JVM_THREAD_COUNT
              value: "50"
            - name: SPRING_PROFILES_ACTIVE
              value: testdata
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness # 활성 상태를 호출할 엔드포인트
              port: 9001
            initialDelaySeconds: 10 # 호출 전 초기 지연시간
            periodSeconds: 5 # 정보를 가져오는 빈도
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 9001
            initialDelaySeconds: 5
            periodSeconds: 15
          volumeMounts: # 컨피그맵을 컨테이너에서 볼륨으로 마운트
            - mountPath: /workspace/config
              name: catalog-config-volume
      volumes: # 볼륨 이름
        - name: catalog-config-volume
          configMap: # 볼륨을 생성할 컨피그맵
            name: catalog-config