plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2025.0.0")
	set('testcontainersVersion', "1.19.8")
	set('testKeycloakVersion', "3.3.1")
}

bootRun {
	systemProperty 'spring.profiles.active', 'testdata'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.retry:spring-retry' // 스프링 리트라이
	implementation 'org.springframework.boot:spring-boot-starter-actuator' // 액츄에이터 (새로고침 이벤트 트리거 엔드포인트 설정)
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server' // 스프링 리소스 서버 (spring security 포함)

	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	runtimeOnly 'org.postgresql:postgresql'

	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql' // 사용할 db에 맞게 라이브러리 사용해야한다


	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor" // properties에 대한 메타데이터 생성

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

bootBuildImage { // 빌드 팩을 이용해 이미지를 빌드하기 위한 작업 (패키토 사용)
	imageName = "${project.name}" // 버전 지정 안하면 latest로 된다
	environment = ["BP_JVM_VERSION" : "21.*"] // 이미지에 설치할 JVM 버전

	docker { // 컨테이너 저장소 (ex 깃허브 저장소) 연결을 위한 섹션
		publishRegistry { // 컨테이너 저장소 인증을 위한 섹션, gradle 속성을 통해 전달
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
